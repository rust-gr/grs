diff -u old/gkscore.h new/gkscore.h
--- old/gkscore.h	2023-10-09 16:02:02
+++ new/gkscore.h	2023-10-09 16:02:24
@@ -1,25 +1,12 @@
 #ifndef _GKSCORE_H_
 #define _GKSCORE_H_
 
-#include <stddef.h>
+typedef char size_t; // placeholder-type (dropped by rust-bindgen)
 
-#ifdef _WIN32
-
-#include <windows.h> /* required for all Windows applications */
-#define DLLEXPORT __declspec(dllexport)
-
-#ifdef TEXT
-#undef TEXT
-#endif
-
-#else
-
 #ifndef DLLEXPORT
 #define DLLEXPORT
 #endif
 
-#endif
-
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -183,13 +170,6 @@
   int debug;
 } gks_state_list_t;
 
-typedef struct gks_list
-{
-  int item;
-  struct gks_list *next;
-  void *ptr;
-} gks_list_t;
-
 typedef struct
 {
   int wkid;
@@ -223,15 +203,6 @@
 
 typedef struct
 {
-  int left, right;
-  int size;
-  int bottom, base, cap, top;
-  int length;
-  int coord[124][2];
-} stroke_data_t;
-
-typedef struct
-{
   int width;
   int height;
   double device_pixel_ratio;
@@ -244,109 +215,29 @@
   int status;
 } gks_locator_t;
 
-int gks_open_font(void);
-void gks_lookup_font(int fd, int version, int font, int chr, stroke_data_t *buffer);
-void gks_close_font(int fd);
-
-void gks_lookup_afm(int font, int chr, stroke_data_t *buffer);
-
 DLLEXPORT char *gks_malloc(int size);
 DLLEXPORT char *gks_realloc(void *ptr, int size);
 DLLEXPORT void gks_free(void *ptr);
 DLLEXPORT char *gks_strdup(const char *str);
 
 DLLEXPORT void gks_perror(const char *, ...);
-void gks_fatal_error(const char *, ...);
-const char *gks_function_name(int routine);
-void gks_report_error(int routine, int errnum);
 
 DLLEXPORT void gks_resample(const unsigned char *source_image, unsigned char *target_image, size_t source_width,
                             size_t source_height, size_t target_width, size_t target_height, size_t stride, int swapx,
                             int swapy, unsigned int resample_method);
-void gks_init_core(gks_state_list_t *list);
-gks_list_t *gks_list_find(gks_list_t *list, int element);
-gks_list_t *gks_list_add(gks_list_t *list, int element, void *ptr);
-gks_list_t *gks_list_del(gks_list_t *list, int element);
-void gks_list_free(gks_list_t *list);
-void gks_inq_pattern_array(int index, int *pa);
-void gks_set_pattern_array(int index, int *pa);
-void gks_inq_rgb(int index, double *red, double *green, double *blue);
-void gks_set_rgb(int index, double red, double green, double blue);
-void gks_inq_pixel(int index, int *pixel);
-void gks_set_pixel(int index, int pixel);
-void gks_fit_ws_viewport(double *viewport, double xmax, double ymax, double margin);
-void gks_set_norm_xform(int tnr, double *window, double *viewport);
-void gks_set_xform_matrix(double tran[3][2]);
-void gks_seg_xform(double *x, double *y);
-DLLEXPORT void gks_WC_to_NDC(int tnr, double *x, double *y);
-void gks_NDC_to_WC(int tnr, double *x, double *y);
-void gks_set_dev_xform(gks_state_list_t *s, double *window, double *viewport);
-void gks_inq_dev_xform(double *window, double *viewport);
-void gks_set_chr_xform(void);
-void gks_chr_height(double *height);
-void gks_get_dash(int ltype, double scale, char *dash);
-void gks_get_dash_list(int ltype, double scale, int list[10]);
-void gks_move(double x, double y, void (*move)(double x, double y));
-void gks_dash(double x, double y, void (*move)(double x, double y), void (*draw)(double x, double y));
-void gks_emul_polyline(int n, double *px, double *py, int ltype, int tnr, void (*move)(double x, double y),
-                       void (*draw)(double x, double y));
-void gks_emul_polymarker(int n, double *px, double *py, void (*marker)(double x, double y, int mtype));
-void gks_emul_text(double px, double py, int nchars, char *chars,
-                   void (*polyline)(int n, double *px, double *py, int ltype, int tnr),
-                   void (*fillarea)(int n, double *px, double *py, int tnr));
-void gks_emul_fillarea(int n, double *px, double *py, int tnr,
-                       void (*polyline)(int n, double *px, double *py, int ltype, int tnr), double yres);
-void gks_util_inq_text_extent(double px, double py, char *chars, int nchars, double *cpx, double *cpy, double tx[4],
-                              double ty[4]);
-int gks_get_ws_type(void);
-int gks_base64(unsigned char *src, size_t srclength, char *target, size_t targsize);
 DLLEXPORT const char *gks_getenv(const char *env);
-void gks_iso2utf(unsigned char c, char *utf, size_t *len);
-void gks_symbol2utf(unsigned char c, char *utf, size_t *len);
-void gks_input2utf8(const char *input_str, char *utf8_str, int input_encoding);
-void gks_utf82latin1(const char *utf8_str, char *latin1_str);
-int *gks_resize(int *image, int width, int height, int w, int h);
-void gks_filepath(char *path, char *defpath, const char *type, int page, int index);
-void gks_adjust_cellarray(double *qx, double *qy, double *rx, double *ry, int *scol, int *srow, int *ncol, int *nrow,
-                          int dimx, int dimy);
 
 DLLEXPORT void gks_dl_write_item(gks_display_list_t *d, int fctid, int dx, int dy, int dimx, int *ia, int lr1,
                                  double *r1, int lr2, double *r2, int lc, char *c, gks_state_list_t *gkss);
 DLLEXPORT int gks_dl_read_item(char *dl, gks_state_list_t **gkss,
                                void (*fn)(int fctid, int dx, int dy, int dimx, int *ia, int lr1, double *r1, int lr2,
                                           double *r2, int lc, char *chars, void **ptr));
-void gks_wiss_dispatch(int fctid, int wkid, int segn);
-int gks_debug(void);
 
 #ifndef __EMSCRIPTEN__
 
-void gks_drv_mo(int fctid, int dx, int dy, int dimx, int *i_arr, int len_f_arr_1, double *f_arr_1, int len_f_arr_2,
-                double *f_arr_2, int len_c_arr, char *c_arr, void **ptr);
-
-void gks_drv_mi(int fctid, int dx, int dy, int dimx, int *i_arr, int len_f_arr_1, double *f_arr_1, int len_f_arr_2,
-                double *f_arr_2, int len_c_arr, char *c_arr, void **ptr);
-
-void gks_drv_wiss(int fctid, int dx, int dy, int dimx, int *i_arr, int len_f_arr_1, double *f_arr_1, int len_f_arr_2,
-                  double *f_arr_2, int len_c_arr, char *c_arr, void **ptr);
-
-void gks_drv_win(int fctid, int dx, int dy, int dimx, int *i_arr, int len_f_arr_1, double *f_arr_1, int len_f_arr_2,
-                 double *f_arr_2, int len_c_arr, char *c_arr, void **ptr);
-
-void gks_drv_ps(int fctid, int dx, int dy, int dimx, int *i_arr, int len_f_arr_1, double *f_arr_1, int len_f_arr_2,
-                double *f_arr_2, int len_c_arr, char *c_arr, void **ptr);
-
-void gks_drv_pdf(int fctid, int dx, int dy, int dimx, int *i_arr, int len_f_arr_1, double *f_arr_1, int len_f_arr_2,
-                 double *f_arr_2, int len_c_arr, char *c_arr, void **ptr);
-
 DLLEXPORT void gks_x11_plugin(int fctid, int dx, int dy, int dimx, int *i_arr, int len_f_arr_1, double *f_arr_1,
                               int len_f_arr_2, double *f_arr_2, int len_c_arr, char *c_arr, void **ptr);
 
-void gks_drv_socket(int fctid, int dx, int dy, int dimx, int *i_arr, int len_f_arr_1, double *f_arr_1, int len_f_arr_2,
-                    double *f_arr_2, int len_c_arr, char *c_arr, void **ptr);
-
-void gks_drv_plugin(int fctid, int dx, int dy, int dimx, int *i_arr, int len_f_arr_1, double *f_arr_1, int len_f_arr_2,
-                    double *f_arr_2, int len_c_arr, char *c_arr, void **ptr);
-
 DLLEXPORT void gks_gs_plugin(int fctid, int dx, int dy, int dimx, int *i_arr, int len_f_arr_1, double *f_arr_1,
                              int len_f_arr_2, double *f_arr_2, int len_c_arr, char *c_arr, void **ptr);
 
@@ -388,33 +279,13 @@
 
 #else
 
-void gks_drv_js(int fctid, int dx, int dy, int dimx, int *i_arr, int len_f_arr_1, double *f_arr_1, int len_f_arr_2,
-                double *f_arr_2, int len_c_arr, char *c_arr, void **ptr);
-
 #endif
 
-void gks_compress(int bits, unsigned char *in, int in_len, unsigned char *out, int *out_len);
-
-int gks_open_file(const char *path, const char *mode);
-int gks_read_file(int fd, void *buf, int count);
-int gks_write_file(int fd, void *buf, int count);
-int gks_close_file(int fd);
-
-int gks_ft_init(void);
-int *gks_ft_render(int *x, int *y, int *width, int *height, gks_state_list_t *gkss, const char *text, int length);
-unsigned char *gks_ft_get_bitmap(int *x, int *y, int *width, int *height, gks_state_list_t *gkss, const char *text,
-                                 int length);
-void *gks_ft_get_face(int);
 DLLEXPORT int gks_ft_get_metrics(int font, double fontsize, unsigned int codepoint, unsigned int dpi, double *width,
                                  double *height, double *depth, double *advance, double *bearing, double *xmin,
                                  double *xmax, double *ymin, double *ymax);
 DLLEXPORT double gks_ft_get_kerning(int font, double fontsize, unsigned int dpi, unsigned int first_codepoint,
                                     unsigned int second_codepoint);
-void gks_ft_terminate(void);
-void gks_ft_text(double x, double y, char *text, gks_state_list_t *gkss,
-                 void (*gdp)(int, double *, double *, int, int, int *));
-void gks_ft_inq_text_extent(double x, double y, char *text, gks_state_list_t *gkss,
-                            void (*gdp)(int, double *, double *, int, int, int *), double *bx, double *by);
 DLLEXPORT void gks_ft_text3d(double x, double y, double z, char *text, int axis, gks_state_list_t *gkss,
                              double heightFactor, double *scaleFactors,
                              void (*gdp)(int, double *, double *, int, int, int *),
