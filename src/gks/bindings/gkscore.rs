/* automatically generated by rust-bindgen 0.68.1 */

pub const GRALGKS: u32 = 3;
pub const GLIGKS: u32 = 4;
pub const GKS5: u32 = 5;
pub const MAX_WS: u32 = 16;
pub const MAX_TNR: u32 = 9;
pub const MAX_COLOR: u32 = 1256;
pub const OPEN_GKS: u32 = 0;
pub const CLOSE_GKS: u32 = 1;
pub const OPEN_WS: u32 = 2;
pub const CLOSE_WS: u32 = 3;
pub const ACTIVATE_WS: u32 = 4;
pub const DEACTIVATE_WS: u32 = 5;
pub const CLEAR_WS: u32 = 6;
pub const REDRAW_SEG_ON_WS: u32 = 7;
pub const UPDATE_WS: u32 = 8;
pub const SET_DEFERRAL_STATE: u32 = 9;
pub const MESSAGE: u32 = 10;
pub const ESCAPE: u32 = 11;
pub const POLYLINE: u32 = 12;
pub const POLYMARKER: u32 = 13;
pub const TEXT: u32 = 14;
pub const FILLAREA: u32 = 15;
pub const CELLARRAY: u32 = 16;
pub const GDP: u32 = 17;
pub const SET_PLINE_INDEX: u32 = 18;
pub const SET_PLINE_LINETYPE: u32 = 19;
pub const SET_PLINE_LINEWIDTH: u32 = 20;
pub const SET_PLINE_COLOR_INDEX: u32 = 21;
pub const SET_PMARK_INDEX: u32 = 22;
pub const SET_PMARK_TYPE: u32 = 23;
pub const SET_PMARK_SIZE: u32 = 24;
pub const SET_PMARK_COLOR_INDEX: u32 = 25;
pub const SET_TEXT_INDEX: u32 = 26;
pub const SET_TEXT_FONTPREC: u32 = 27;
pub const SET_TEXT_EXPFAC: u32 = 28;
pub const SET_TEXT_SPACING: u32 = 29;
pub const SET_TEXT_COLOR_INDEX: u32 = 30;
pub const SET_TEXT_HEIGHT: u32 = 31;
pub const SET_TEXT_UPVEC: u32 = 32;
pub const SET_TEXT_PATH: u32 = 33;
pub const SET_TEXT_ALIGN: u32 = 34;
pub const SET_FILL_INDEX: u32 = 35;
pub const SET_FILL_INT_STYLE: u32 = 36;
pub const SET_FILL_STYLE_INDEX: u32 = 37;
pub const SET_FILL_COLOR_INDEX: u32 = 38;
pub const SET_ASF: u32 = 41;
pub const SET_COLOR_REP: u32 = 48;
pub const SET_WINDOW: u32 = 49;
pub const SET_VIEWPORT: u32 = 50;
pub const SELECT_XFORM: u32 = 52;
pub const SET_CLIPPING: u32 = 53;
pub const SET_WS_WINDOW: u32 = 54;
pub const SET_WS_VIEWPORT: u32 = 55;
pub const CREATE_SEG: u32 = 56;
pub const CLOSE_SEG: u32 = 57;
pub const DELETE_SEG: u32 = 58;
pub const ASSOC_SEG_WITH_WS: u32 = 61;
pub const COPY_SEG_TO_WS: u32 = 62;
pub const SET_SEG_XFORM: u32 = 64;
pub const INITIALIZE_LOCATOR: u32 = 69;
pub const REQUEST_LOCATOR: u32 = 81;
pub const REQUEST_STROKE: u32 = 82;
pub const REQUEST_CHOICE: u32 = 84;
pub const REQUEST_STRING: u32 = 86;
pub const GET_ITEM: u32 = 102;
pub const READ_ITEM: u32 = 103;
pub const INTERPRET_ITEM: u32 = 104;
pub const EVAL_XFORM_MATRIX: u32 = 105;
pub const SET_ENCODING: u32 = 106;
pub const INQ_ENCODING: u32 = 107;
pub const SET_RESAMPLE_METHOD: u32 = 108;
pub const SET_RESIZE_BEHAVIOUR: u32 = 109;
pub const INQ_TEXT: u32 = 110;
pub const SET_TEXT_SLANT: u32 = 200;
pub const DRAW_IMAGE: u32 = 201;
pub const SET_SHADOW: u32 = 202;
pub const SET_TRANSPARENCY: u32 = 203;
pub const SET_COORD_XFORM: u32 = 204;
pub const CONFIGURE_WS: u32 = 205;
pub const SET_BORDER_WIDTH: u32 = 206;
pub const SET_BORDER_COLOR_INDEX: u32 = 207;
pub const SELECT_CLIP_XFORM: u32 = 208;
pub const INQ_WS_STATE: u32 = 209;
pub const SAMPLE_LOCATOR: u32 = 210;
pub const BEGIN_SELECTION: u32 = 250;
pub const END_SELECTION: u32 = 251;
pub const MOVE_SELECTION: u32 = 252;
pub const RESIZE_SELECTION: u32 = 253;
pub const INQ_BBOX: u32 = 254;
pub const GRM_BEGIN_SELECTION: u32 = 260;
pub const GRM_END_SELECTION: u32 = 261;
pub const ENCODING_LATIN1: u32 = 300;
pub const ENCODING_UTF8: u32 = 301;
pub const MAX_ATTRIBUTE_FCTID: u32 = 55;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gks_state_list_t {
    pub lindex: ::core::ffi::c_int,
    pub ltype: ::core::ffi::c_int,
    pub lwidth: f64,
    pub plcoli: ::core::ffi::c_int,
    pub mindex: ::core::ffi::c_int,
    pub mtype: ::core::ffi::c_int,
    pub mszsc: f64,
    pub pmcoli: ::core::ffi::c_int,
    pub tindex: ::core::ffi::c_int,
    pub txfont: ::core::ffi::c_int,
    pub txprec: ::core::ffi::c_int,
    pub chxp: f64,
    pub chsp: f64,
    pub txcoli: ::core::ffi::c_int,
    pub chh: f64,
    pub chup: [f64; 2usize],
    pub txp: ::core::ffi::c_int,
    pub txal: [::core::ffi::c_int; 2usize],
    pub findex: ::core::ffi::c_int,
    pub ints: ::core::ffi::c_int,
    pub styli: ::core::ffi::c_int,
    pub facoli: ::core::ffi::c_int,
    pub window: [[f64; 4usize]; 9usize],
    pub viewport: [[f64; 4usize]; 9usize],
    pub cntnr: ::core::ffi::c_int,
    pub clip: ::core::ffi::c_int,
    pub opsg: ::core::ffi::c_int,
    pub mat: [[f64; 2usize]; 3usize],
    pub asf: [::core::ffi::c_int; 13usize],
    pub wiss: ::core::ffi::c_int,
    pub version: ::core::ffi::c_int,
    pub fontfile: ::core::ffi::c_int,
    pub input_encoding: ::core::ffi::c_int,
    pub txslant: f64,
    pub shoff: [f64; 2usize],
    pub blur: f64,
    pub alpha: f64,
    pub a: [f64; 9usize],
    pub b: [f64; 9usize],
    pub c: [f64; 9usize],
    pub d: [f64; 9usize],
    pub resample_method: ::core::ffi::c_uint,
    pub bwidth: f64,
    pub bcoli: ::core::ffi::c_int,
    pub clip_tnr: ::core::ffi::c_int,
    pub resize_behaviour: ::core::ffi::c_int,
    pub aspect_ratio: f64,
    pub callback: ::core::option::Option<
        unsafe extern "C" fn(arg1: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char,
    >,
    pub debug: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gks_list {
    pub item: ::core::ffi::c_int,
    pub next: *mut gks_list,
    pub ptr: *mut ::core::ffi::c_void,
}
pub type gks_list_t = gks_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ws_list_t {
    pub wkid: ::core::ffi::c_int,
    pub path: *mut ::core::ffi::c_char,
    pub wtype: ::core::ffi::c_int,
    pub conid: ::core::ffi::c_int,
    pub ptr: *mut ::core::ffi::c_void,
    pub vp: [f64; 4usize],
    pub name: *mut ::core::ffi::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ws_descr_t {
    pub wtype: ::core::ffi::c_int,
    pub dcunit: ::core::ffi::c_int,
    pub sizex: f64,
    pub sizey: f64,
    pub unitsx: ::core::ffi::c_int,
    pub unitsy: ::core::ffi::c_int,
    pub wscat: ::core::ffi::c_int,
    pub type_: *mut ::core::ffi::c_char,
    pub env: *mut ::core::ffi::c_char,
    pub name: *mut ::core::ffi::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gks_display_list_t {
    pub state: ::core::ffi::c_int,
    pub buffer: *mut ::core::ffi::c_char,
    pub size: ::core::ffi::c_int,
    pub nbytes: ::core::ffi::c_int,
    pub position: ::core::ffi::c_int,
    pub empty: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stroke_data_t {
    pub left: ::core::ffi::c_int,
    pub right: ::core::ffi::c_int,
    pub size: ::core::ffi::c_int,
    pub bottom: ::core::ffi::c_int,
    pub base: ::core::ffi::c_int,
    pub cap: ::core::ffi::c_int,
    pub top: ::core::ffi::c_int,
    pub length: ::core::ffi::c_int,
    pub coord: [[::core::ffi::c_int; 2usize]; 124usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gks_ws_state_t {
    pub width: ::core::ffi::c_int,
    pub height: ::core::ffi::c_int,
    pub device_pixel_ratio: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gks_locator_t {
    pub x: f64,
    pub y: f64,
    pub status: ::core::ffi::c_int,
}
extern "C" {
    pub fn gks_open_font() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gks_lookup_font(
        fd: ::core::ffi::c_int,
        version: ::core::ffi::c_int,
        font: ::core::ffi::c_int,
        chr: ::core::ffi::c_int,
        buffer: *mut stroke_data_t,
    );
}
extern "C" {
    pub fn gks_close_font(fd: ::core::ffi::c_int);
}
extern "C" {
    pub fn gks_lookup_afm(
        font: ::core::ffi::c_int,
        chr: ::core::ffi::c_int,
        buffer: *mut stroke_data_t,
    );
}
extern "C" {
    pub fn gks_malloc(size: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn gks_realloc(
        ptr: *mut ::core::ffi::c_void,
        size: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn gks_free(ptr: *mut ::core::ffi::c_void);
}
extern "C" {
    pub fn gks_strdup(str_: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn gks_perror(arg1: *const ::core::ffi::c_char, ...);
}
extern "C" {
    pub fn gks_fatal_error(arg1: *const ::core::ffi::c_char, ...);
}
extern "C" {
    pub fn gks_function_name(routine: ::core::ffi::c_int) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn gks_report_error(routine: ::core::ffi::c_int, errnum: ::core::ffi::c_int);
}
extern "C" {
    pub fn gks_resample(
        source_image: *const ::core::ffi::c_uchar,
        target_image: *mut ::core::ffi::c_uchar,
        source_width: usize,
        source_height: usize,
        target_width: usize,
        target_height: usize,
        stride: usize,
        swapx: ::core::ffi::c_int,
        swapy: ::core::ffi::c_int,
        resample_method: ::core::ffi::c_uint,
    );
}
extern "C" {
    pub fn gks_init_core(list: *mut gks_state_list_t);
}
extern "C" {
    pub fn gks_list_find(list: *mut gks_list_t, element: ::core::ffi::c_int) -> *mut gks_list_t;
}
extern "C" {
    pub fn gks_list_add(
        list: *mut gks_list_t,
        element: ::core::ffi::c_int,
        ptr: *mut ::core::ffi::c_void,
    ) -> *mut gks_list_t;
}
extern "C" {
    pub fn gks_list_del(list: *mut gks_list_t, element: ::core::ffi::c_int) -> *mut gks_list_t;
}
extern "C" {
    pub fn gks_list_free(list: *mut gks_list_t);
}
extern "C" {
    pub fn gks_inq_pattern_array(index: ::core::ffi::c_int, pa: *mut ::core::ffi::c_int);
}
extern "C" {
    pub fn gks_set_pattern_array(index: ::core::ffi::c_int, pa: *mut ::core::ffi::c_int);
}
extern "C" {
    pub fn gks_inq_rgb(index: ::core::ffi::c_int, red: *mut f64, green: *mut f64, blue: *mut f64);
}
extern "C" {
    pub fn gks_set_rgb(index: ::core::ffi::c_int, red: f64, green: f64, blue: f64);
}
extern "C" {
    pub fn gks_inq_pixel(index: ::core::ffi::c_int, pixel: *mut ::core::ffi::c_int);
}
extern "C" {
    pub fn gks_set_pixel(index: ::core::ffi::c_int, pixel: ::core::ffi::c_int);
}
extern "C" {
    pub fn gks_fit_ws_viewport(viewport: *mut f64, xmax: f64, ymax: f64, margin: f64);
}
extern "C" {
    pub fn gks_set_norm_xform(tnr: ::core::ffi::c_int, window: *mut f64, viewport: *mut f64);
}
extern "C" {
    pub fn gks_set_xform_matrix(tran: *mut [f64; 2usize]);
}
extern "C" {
    pub fn gks_seg_xform(x: *mut f64, y: *mut f64);
}
extern "C" {
    pub fn gks_WC_to_NDC(tnr: ::core::ffi::c_int, x: *mut f64, y: *mut f64);
}
extern "C" {
    pub fn gks_NDC_to_WC(tnr: ::core::ffi::c_int, x: *mut f64, y: *mut f64);
}
extern "C" {
    pub fn gks_set_dev_xform(s: *mut gks_state_list_t, window: *mut f64, viewport: *mut f64);
}
extern "C" {
    pub fn gks_inq_dev_xform(window: *mut f64, viewport: *mut f64);
}
extern "C" {
    pub fn gks_set_chr_xform();
}
extern "C" {
    pub fn gks_chr_height(height: *mut f64);
}
extern "C" {
    pub fn gks_get_dash(ltype: ::core::ffi::c_int, scale: f64, dash: *mut ::core::ffi::c_char);
}
extern "C" {
    pub fn gks_get_dash_list(ltype: ::core::ffi::c_int, scale: f64, list: *mut ::core::ffi::c_int);
}
extern "C" {
    pub fn gks_move(
        x: f64,
        y: f64,
        move_: ::core::option::Option<unsafe extern "C" fn(x: f64, y: f64)>,
    );
}
extern "C" {
    pub fn gks_dash(
        x: f64,
        y: f64,
        move_: ::core::option::Option<unsafe extern "C" fn(x: f64, y: f64)>,
        draw: ::core::option::Option<unsafe extern "C" fn(x: f64, y: f64)>,
    );
}
extern "C" {
    pub fn gks_emul_polyline(
        n: ::core::ffi::c_int,
        px: *mut f64,
        py: *mut f64,
        ltype: ::core::ffi::c_int,
        tnr: ::core::ffi::c_int,
        move_: ::core::option::Option<unsafe extern "C" fn(x: f64, y: f64)>,
        draw: ::core::option::Option<unsafe extern "C" fn(x: f64, y: f64)>,
    );
}
extern "C" {
    pub fn gks_emul_polymarker(
        n: ::core::ffi::c_int,
        px: *mut f64,
        py: *mut f64,
        marker: ::core::option::Option<
            unsafe extern "C" fn(x: f64, y: f64, mtype: ::core::ffi::c_int),
        >,
    );
}
extern "C" {
    pub fn gks_emul_text(
        px: f64,
        py: f64,
        nchars: ::core::ffi::c_int,
        chars: *mut ::core::ffi::c_char,
        polyline: ::core::option::Option<
            unsafe extern "C" fn(
                n: ::core::ffi::c_int,
                px: *mut f64,
                py: *mut f64,
                ltype: ::core::ffi::c_int,
                tnr: ::core::ffi::c_int,
            ),
        >,
        fillarea: ::core::option::Option<
            unsafe extern "C" fn(
                n: ::core::ffi::c_int,
                px: *mut f64,
                py: *mut f64,
                tnr: ::core::ffi::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn gks_emul_fillarea(
        n: ::core::ffi::c_int,
        px: *mut f64,
        py: *mut f64,
        tnr: ::core::ffi::c_int,
        polyline: ::core::option::Option<
            unsafe extern "C" fn(
                n: ::core::ffi::c_int,
                px: *mut f64,
                py: *mut f64,
                ltype: ::core::ffi::c_int,
                tnr: ::core::ffi::c_int,
            ),
        >,
        yres: f64,
    );
}
extern "C" {
    pub fn gks_util_inq_text_extent(
        px: f64,
        py: f64,
        chars: *mut ::core::ffi::c_char,
        nchars: ::core::ffi::c_int,
        cpx: *mut f64,
        cpy: *mut f64,
        tx: *mut f64,
        ty: *mut f64,
    );
}
extern "C" {
    pub fn gks_get_ws_type() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gks_base64(
        src: *mut ::core::ffi::c_uchar,
        srclength: usize,
        target: *mut ::core::ffi::c_char,
        targsize: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gks_getenv(env: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn gks_iso2utf(c: ::core::ffi::c_uchar, utf: *mut ::core::ffi::c_char, len: *mut usize);
}
extern "C" {
    pub fn gks_symbol2utf(c: ::core::ffi::c_uchar, utf: *mut ::core::ffi::c_char, len: *mut usize);
}
extern "C" {
    pub fn gks_input2utf8(
        input_str: *const ::core::ffi::c_char,
        utf8_str: *mut ::core::ffi::c_char,
        input_encoding: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn gks_utf82latin1(
        utf8_str: *const ::core::ffi::c_char,
        latin1_str: *mut ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn gks_resize(
        image: *mut ::core::ffi::c_int,
        width: ::core::ffi::c_int,
        height: ::core::ffi::c_int,
        w: ::core::ffi::c_int,
        h: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_int;
}
extern "C" {
    pub fn gks_filepath(
        path: *mut ::core::ffi::c_char,
        defpath: *mut ::core::ffi::c_char,
        type_: *const ::core::ffi::c_char,
        page: ::core::ffi::c_int,
        index: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn gks_adjust_cellarray(
        qx: *mut f64,
        qy: *mut f64,
        rx: *mut f64,
        ry: *mut f64,
        scol: *mut ::core::ffi::c_int,
        srow: *mut ::core::ffi::c_int,
        ncol: *mut ::core::ffi::c_int,
        nrow: *mut ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        dimy: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn gks_dl_write_item(
        d: *mut gks_display_list_t,
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        ia: *mut ::core::ffi::c_int,
        lr1: ::core::ffi::c_int,
        r1: *mut f64,
        lr2: ::core::ffi::c_int,
        r2: *mut f64,
        lc: ::core::ffi::c_int,
        c: *mut ::core::ffi::c_char,
        gkss: *mut gks_state_list_t,
    );
}
extern "C" {
    pub fn gks_dl_read_item(
        dl: *mut ::core::ffi::c_char,
        gkss: *mut *mut gks_state_list_t,
        fn_: ::core::option::Option<
            unsafe extern "C" fn(
                fctid: ::core::ffi::c_int,
                dx: ::core::ffi::c_int,
                dy: ::core::ffi::c_int,
                dimx: ::core::ffi::c_int,
                ia: *mut ::core::ffi::c_int,
                lr1: ::core::ffi::c_int,
                r1: *mut f64,
                lr2: ::core::ffi::c_int,
                r2: *mut f64,
                lc: ::core::ffi::c_int,
                chars: *mut ::core::ffi::c_char,
                ptr: *mut *mut ::core::ffi::c_void,
            ),
        >,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gks_wiss_dispatch(
        fctid: ::core::ffi::c_int,
        wkid: ::core::ffi::c_int,
        segn: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn gks_debug() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gks_drv_mo(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_drv_mi(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_drv_wiss(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_drv_win(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_drv_ps(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_drv_pdf(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_x11_plugin(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_drv_socket(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_drv_plugin(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_gs_plugin(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_gtk_plugin(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_wx_plugin(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_qt_plugin(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_svg_plugin(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_wmf_plugin(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_quartz_plugin(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_gl_plugin(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_cairo_plugin(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_zmq_plugin(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_pgf_plugin(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_video_plugin(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_agg_plugin(
        fctid: ::core::ffi::c_int,
        dx: ::core::ffi::c_int,
        dy: ::core::ffi::c_int,
        dimx: ::core::ffi::c_int,
        i_arr: *mut ::core::ffi::c_int,
        len_f_arr_1: ::core::ffi::c_int,
        f_arr_1: *mut f64,
        len_f_arr_2: ::core::ffi::c_int,
        f_arr_2: *mut f64,
        len_c_arr: ::core::ffi::c_int,
        c_arr: *mut ::core::ffi::c_char,
        ptr: *mut *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn gks_compress(
        bits: ::core::ffi::c_int,
        in_: *mut ::core::ffi::c_uchar,
        in_len: ::core::ffi::c_int,
        out: *mut ::core::ffi::c_uchar,
        out_len: *mut ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn gks_open_file(
        path: *const ::core::ffi::c_char,
        mode: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gks_read_file(
        fd: ::core::ffi::c_int,
        buf: *mut ::core::ffi::c_void,
        count: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gks_write_file(
        fd: ::core::ffi::c_int,
        buf: *mut ::core::ffi::c_void,
        count: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gks_close_file(fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gks_ft_init() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gks_ft_render(
        x: *mut ::core::ffi::c_int,
        y: *mut ::core::ffi::c_int,
        width: *mut ::core::ffi::c_int,
        height: *mut ::core::ffi::c_int,
        gkss: *mut gks_state_list_t,
        text: *const ::core::ffi::c_char,
        length: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_int;
}
extern "C" {
    pub fn gks_ft_get_bitmap(
        x: *mut ::core::ffi::c_int,
        y: *mut ::core::ffi::c_int,
        width: *mut ::core::ffi::c_int,
        height: *mut ::core::ffi::c_int,
        gkss: *mut gks_state_list_t,
        text: *const ::core::ffi::c_char,
        length: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_uchar;
}
extern "C" {
    pub fn gks_ft_get_face(arg1: ::core::ffi::c_int) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn gks_ft_get_metrics(
        font: ::core::ffi::c_int,
        fontsize: f64,
        codepoint: ::core::ffi::c_uint,
        dpi: ::core::ffi::c_uint,
        width: *mut f64,
        height: *mut f64,
        depth: *mut f64,
        advance: *mut f64,
        bearing: *mut f64,
        xmin: *mut f64,
        xmax: *mut f64,
        ymin: *mut f64,
        ymax: *mut f64,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gks_ft_get_kerning(
        font: ::core::ffi::c_int,
        fontsize: f64,
        dpi: ::core::ffi::c_uint,
        first_codepoint: ::core::ffi::c_uint,
        second_codepoint: ::core::ffi::c_uint,
    ) -> f64;
}
extern "C" {
    pub fn gks_ft_terminate();
}
extern "C" {
    pub fn gks_ft_text(
        x: f64,
        y: f64,
        text: *mut ::core::ffi::c_char,
        gkss: *mut gks_state_list_t,
        gdp: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: ::core::ffi::c_int,
                arg2: *mut f64,
                arg3: *mut f64,
                arg4: ::core::ffi::c_int,
                arg5: ::core::ffi::c_int,
                arg6: *mut ::core::ffi::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn gks_ft_inq_text_extent(
        x: f64,
        y: f64,
        text: *mut ::core::ffi::c_char,
        gkss: *mut gks_state_list_t,
        gdp: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: ::core::ffi::c_int,
                arg2: *mut f64,
                arg3: *mut f64,
                arg4: ::core::ffi::c_int,
                arg5: ::core::ffi::c_int,
                arg6: *mut ::core::ffi::c_int,
            ),
        >,
        bx: *mut f64,
        by: *mut f64,
    );
}
extern "C" {
    pub fn gks_ft_text3d(
        x: f64,
        y: f64,
        z: f64,
        text: *mut ::core::ffi::c_char,
        axis: ::core::ffi::c_int,
        gkss: *mut gks_state_list_t,
        heightFactor: f64,
        scaleFactors: *mut f64,
        gdp: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: ::core::ffi::c_int,
                arg2: *mut f64,
                arg3: *mut f64,
                arg4: ::core::ffi::c_int,
                arg5: ::core::ffi::c_int,
                arg6: *mut ::core::ffi::c_int,
            ),
        >,
        wc3towc: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut f64, arg2: *mut f64, arg3: *mut f64),
        >,
    );
}
extern "C" {
    pub fn gks_ft_inq_text3d_extent(
        x: f64,
        y: f64,
        z: f64,
        text: *mut ::core::ffi::c_char,
        axis: ::core::ffi::c_int,
        gkss: *mut gks_state_list_t,
        heightFactor: f64,
        scaleFactors: *mut f64,
        gdp: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: ::core::ffi::c_int,
                arg2: *mut f64,
                arg3: *mut f64,
                arg4: ::core::ffi::c_int,
                arg5: ::core::ffi::c_int,
                arg6: *mut ::core::ffi::c_int,
            ),
        >,
        wc3towc: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut f64, arg2: *mut f64, arg3: *mut f64),
        >,
        bx: *mut f64,
        by: *mut f64,
    );
}
extern "C" {
    pub fn gks_ft_set_bearing_x_direction(arg1: ::core::ffi::c_int);
}
extern "C" {
    pub fn gks_ft_inq_bearing_x_direction(arg1: *mut ::core::ffi::c_int);
}
extern "C" {
    pub fn gks_ft_load_user_font(
        font: *mut ::core::ffi::c_char,
        ignore_file_not_found: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gks_set_encoding(encoding: ::core::ffi::c_int);
}
extern "C" {
    pub fn gks_inq_encoding(encoding: *mut ::core::ffi::c_int);
}
extern "C" {
    pub fn gks_set_callback(
        callback: ::core::option::Option<
            unsafe extern "C" fn(arg1: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char,
        >,
    );
}
